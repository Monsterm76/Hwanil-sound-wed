@charset "utf-8";

* {
   margin: 0px;
   padding: 0px;
   box-sizing: border-box;
}
ul, ol, li {
   list-style: none;
}
a {
   text-decoration: none;
   outline: 0;
}


figure {
   width: 100%;     /* 부모 요소의 전체 너비  */
   height: 100vh;  /* 뷰포트의 전체 높이  */
   min-height: 600px;  /* 최소 높이  */
   overflow: hidden;
   position: relative;
      /* <figure> 요소의 위치를 상대 위치로 설정, 
    자식 요소에 position: absolute;가 적용될 경우, <figure>를 기준으로 위치가 결정됨 */
   background: linear-gradient(25deg,rgb(28, 181, 241), skyblue); /* 선형 그라디언트  */
}
figure h1 {
   position: absolute;
   top: 7vh;
   left: 4vw;
   font-size: 0;
}
figure h1 strong {
   font-size: 36px;
   font-family: "arial";
   color: #fff;
   line-height: 1.4;
   letter-spacing: 1px;
    /* 문자와 문자 사이의 간격을 1픽셀 */
}
figure h1 span {
   font-size: 12px;
   font-family: "arial";
   color: #fff;
   opacity: 0.8;
   line-height: 1;
   letter-spacing: 1px;
}
figure .menu {
   position: absolute;
   top: 8vh;
   right: 4vw;
   font-size: 24px;
   color: #fff;
}
figure > p {
   position: absolute;
   bottom: 7vh;
   left: 50%;
   transform: translateX(-50%);
    /* position:  absolute;,relative;  같은 위치 지정 값을 가진 요소를 수평으로 중앙에 배치 left, trans 중앙 정렬 조합 CSS 기술 */
    /* position - 요소의 위치를 직접 지정, 플렉스박스 - 여러 요소 간의 배치와 정렬을 관리하는 레이아웃 방법 */
   font: 12px/1 "arial";
   color: #fff;
   letter-spacing: 2px;
   opacity: 0.8;
}

figure section { /*음악 플레이어 패널 프레임 그룹*/
    width: 20vw;
    height: 65vh;
    position: absolute;
    left: 50%;
    top: 50%;
    margin-top: -25vh;
    margin-left: -10vw;   
    top: 140%;
    transition: 1s;
 }
 figure section article { /*개별 음악 플레이어 패널*/
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0px;
    left: 0px;
 }
 figure section article .inner { /*음악 플레이어 패널 콘텐츠 그룹*/
    width: 100%;
    height: 100%;
    background: #f0f7ff;
    padding: 5vh 2.5vw 8vh;
    box-sizing: border-box;
    display: flex;
    justify-content: center;  /* 주 축 (기본적으로 가로 축)에서 플렉스 아이템들의 정렬 */
    align-content: space-between; /*자식 콘텐츠의 안쪽 세로 여백을 균등 배치, 
     align-content는 여러 행 또는 열의 플렉스 아이템들 사이의 정렬을 결정 (단일 행/열의 경우 align-items 속성)*/
    flex-wrap: wrap; /* 플렉스 아이템들이 컨테이너 안에서 어떻게 줄 바꿈될지 결정 */
     /* wrap 값은 플렉스 아이템들이 컨테이너의 너비를 초과할 경우, 다음 행 (또는 열)로 아이템들을 이동 */
    border-radius: 10px;
    box-shadow: 10px 10px 20px rgba(0, 0, 0, 0.1);
    opacity: 0.6; /*투명도를 낮춰서 비활성화*/
    transform: scale(0.8); /*축소시켜서 비솰성화*/
    transition: opacity 1s; transform: 1s;
 }
 figure section article.on .inner {
    opacity: 0.9;
    transform: scale(1.1);
 }

 figure section article .inner .pic {
    width: 15vw;
    height: 15vw;
    margin: 0px auto;
    border-radius: 50%;     /* 원형 모양으로 스타일링 */
    display: flex;
    justify-content: center;
    align-items: center;
 
     position: relative;
    background-repeat: no-repeat; /* 배경 이미지 반복 방지 */
    background-position: 200%;
     /* 배경 이미지의 시작 위치 설정, 첫 번째 값 수평 위치, 두 번째 값은 수직 위치  
     background-position: 50% 50%;는 배경 이미지를 요소의 정중앙에 배치 
     단일 값이 주어질 경우, 이 값은 수평 위치를 나타내며 수직 위치는 기본값인 50%로 설정
     background-position: 200%;는 수평으로 매우 오른쪽으로, 수직으로는 중앙에 배치 
     -> 대부분의 배경 이미지 가리기*/
 }
 figure section article .inner .pic::before, 
 figure section article .inner .pic::after {
     /* ::before 및 ::after는 가상 요소로, 선택한 요소 내부의 시작 부분과 끝 부분에 컨텐츠를 추가할 수 있게 해준다. */
     content: ""; /* 빈 문자열로 가상 요소의 내용을 정의, 가상 요소에서 필수적 */
     display: block; /* 가상 요소를 블록 요소로 설정, 가상 요소는 전체 가로 폭을 차지 */
    /* inherit : .inner .pic 요소로부터 상속받은 값(동일한 값)을 사용 */
     width: inherit;
    height: inherit;
    border-radius: inherit;
     /* 가상 요소의 위치를 절대적으로 설정 */
    position: absolute;
    top: 0px;
    left: 0px;
    background-image: inherit;
   
    background-position: center;   /* 배경 이미지의 시작 위치를 요소의 중앙으로 설정 */
    background-repeat: inherit;
    background-size: cover;
    transform-origin: center center;   
     /* 요소에 대한 변형의 기준점 설정 :  
     나중에 transform 속성에 대한 회전같은 효과가 적용될 경우, 중심점이 요소의 중앙이 되도록 합니다. */
 }
 figure section article .inner .pic::before {
    transform: translateY(10%);
    filter: blur(20px) brightness(1.6);    /* 흐리게, 더 밝게  */
 }
 figure section article .inner .pic .dot {
    width: 3vw;
    height: 3vw;
    border-radius: 50%;
    background: #e4f1ff;
    position: relative;
    z-index: 3;     /* 값이 높을수록 우선순위 높아짐 */
    box-shadow: inset 5px 5px 10px rgba(0, 0, 0, 0.1);     /*  그림자 추가 */
 }

 figure section article .inner .txt {
    text-align: center;
    position: relative;
    z-index: 3;
 }
 figure section article .inner .txt h2 {
    font-size: 20px;
    font-family: "arial";
    color: #222;
    margin-bottom: 2vh;
 }
 figure section article .inner .txt p {
    font-size: 12px;
    margin-bottom: 3vh;
    color: #777;
 }
 figure section article .inner .txt ul {
    display: flex;
    justify-content: space-around;
 }
 figure section article .inner .txt ul li {
    cursor: pointer;
    opacity: 0.6;
    transition: 0.5s;
 }
 figure section article .inner .txt ul li.play {
    transform: scale(1.5);
    opacity: 0.9;
 }
 figure section article .inner .txt ul li:hover {
    transform: scale(1.5);
    opacity: 0.8;
 }
 figure section article .inner .txt ul li.play:hover {
    transform: scale(2);
    opacity: 1;
 }

 @keyframes ani {
    0% {
       transform: rotate(0deg);
    }
    100% {
       transform: rotate(360deg);
    }
 }
 @keyframes ani2 {
    0% {
       transform: translateY(10%) rotate(0deg);
    }
    100% {
       transform: translateY(10%) rotate(360deg);
    }
 }
 
 figure section article .inner .pic.on::after {
    animation: ani 4s linear infinite;
 }
 figure section article .inner .pic.on::before {
    animation: ani2 4s linear infinite;
 }

 /* 11단계 */
figure .btnPrev {
    width: 60px;
    height: 60px;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-20vw, -50%);
    display: flex;
    align-items: center;
    text-align: left;
    cursor: pointer;
 }
 figure .btnPrev span {
    font: 11px/1 "arial";
    color: #fff;
    opacity: 1;
    transform: translateX(30%);
    transition: 0.5s;
 }
 figure .btnPrev::before {
    content: "";
    display: block;
    width: 100%;
    height: 1px;
    background: #fff;
    position: absolute;
    top: 50%;
    left: 0px;
    transform-origin: left center;
    transform: rotate(-180deg);
    transition: 0.5s;
 }
 figure .btnPrev::after {
    content: "";
    display: block;
    width: 100%;
    height: 1px;
    background: #fff;
    position: absolute;
    bottom: 50%;
    left: 0px;
    transform-origin: left center;
    transform: rotate(180deg);
    transition: 0.5s;
 }
 figure .btnPrev:hover span {
    opacity: 0;
    transform: translateX(100%);
 }
 figure .btnPrev:hover::before {
    transform: rotate(-30deg);
 }
 figure .btnPrev:hover::after {
    transform: rotate(30deg);
 }
 figure .btnNext {
    width: 60px;
    height: 60px;
    position: absolute;
    top: 50%;
    right: 50%;
    transform: translate(20vw, -50%);
    display: flex;
    align-items: center;
    text-align: right;
    cursor: pointer;
 }
 figure .btnNext span {
    font: 11px/1 "arial";
    color: #fff;
    opacity: 1;
    transform: translateX(-30%);
    transition: 0.5s;
 }
 figure .btnNext::before {
    content: "";
    display: block;
    width: 100%;
    height: 1px;
    background: #fff;
    position: absolute;
    top: 50%;
    left: 0px;
    transform-origin: right center;
    transform: rotate(180deg);
    transition: 0.5s;
 }
 figure .btnNext::after {
    content: "";
    display: block;
    width: 100%;
    height: 1px;
    background: #fff;
    position: absolute;
    bottom: 50%;
    left: 0px;
    transform-origin: right center;
    transform: rotate(-180deg);
    transition: 0.5s;
 }
 figure .btnNext:hover span {
    opacity: 0;
    transform: translateX(-100%);
 }
 figure .btnNext:hover::before {
    transform: rotate(30deg);
 }
 figure .btnNext:hover::after {
    transform: rotate(-30deg);
 }